snippet #!
	#!/usr/bin/env python3

snippet imp
	import ${0:module}

snippet from
	from ${1:package} import ${0:module}

# Module Docstring
snippet docs
	"""
	File: ${1:`vim_snippets#Filename('$1.py', 'foo.py')`}
	Author: `g:snips_author`
	Email: `g:snips_email`
	Github: `g:snips_github`
	Description: ${0}
	"""

# Unittest skip
snippet sk "skip unittests" b
	@unittest.skip(${1:skip_reason})

snippet wh
	while $1:
		${0:${VISUAL}}

snippet with
	with ${1:expr} as ${2:var}:
		${0:${VISUAL}}

snippet awith
	async with ${1:expr} as ${2:var}:
		${0:${VISUAL}}

# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${0}

snippet cla
	class ${1:class_name}:
		"""${0:description}"""

snippet clai
	class ${1:class_name}:
		"""${2:description}"""
		def __init__(self, ${3:args}):
			${0}

# Data class
snippet dcl dataclass
	@dataclass
	class ${1:ClassName}:
		"""${2:description}"""
		${3:var_1}: ${4:int}
		${5:var_2}: ${6:float} = ${7:0}

		def ${8:total}(self): -> $6:
			return ${0:self.$3 * self.$5}

# New Function
snippet def
	def ${1:fname}(${2}):
		${0:pass}

snippet def-
	def ${1:fname}(${2:arg}: ${3:type}) -> ${4:None}:
		${0:pass}

snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${0}

snippet adef
	async def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${0}

snippet adeff
	async def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${0}

# New Method
snippet defi
	def __init__(self, ${1:args}):
		${0}

snippet defm
	def ${1:mname}(self, ${2}):
		${0:pass}

snippet defm-
	def ${1:mname}(${2:arg}: ${3:type}) -> ${4:None}:
		${0:pass}

snippet adefm
	async def ${1:mname}(self, ${2:arg}):
		${0}

# New Property
snippet property
	@property
	def ${1:foo}(self) -> ${2:type}:
		"""${3:doc}"""
		return self._$1

	@$1.setter
	def $1(self, value: $2):
		self._$1 = value

# Ifs
snippet if
	if $1:
		${0:${VISUAL}}

snippet el
	else:
		${0:${VISUAL}}

snippet eif
	elif $1:
		${0:${VISUAL}}

# Match
snippet match Structural pattern matching
	match ${1:expression}:
		case ${2:pattern_1}:
			${3:pass}
		case ${4:pattern_2}:
			${5:pass}

# Match with wildcard
snippet matchw Pattern matching with wildcard
	match ${1:expression}:
		case ${2:pattern_1}:
			${3:pass}
		case _:
			${0:pass}

# For
snippet for
	for ${1:item} in ${2:items}:
		${0}

# Lambda
snippet lm
	${1:var} = lambda ${2:vars} : ${0:action}

snippet ret
	return ${0}

snippet .
	self.

snippet sa self.attribute = attribute
	self.${1:attribute} = $1

snippet try Try/Except
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${0:raise $3}

snippet trye Try/Except/Else
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	else:
		${0}

snippet tryf Try/Except/Finally
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	finally:
		${0}

snippet tryef Try/Except/Else/Finally
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	else:
		${5}
	finally:
		${0}

# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${0:main()}

# __magic__
snippet _
	__${1:init}__

snippet "
	"""${0:doc}
	"""

snippet args
	*args${1:,}${0}

snippet kwargs
	**kwargs${1:,}${0}

snippet akw
	*args, **kwargs${1:,}${0}

# comprehensions
snippet lcp list comprehension
	[${1} for ${2} in ${3:${VISUAL}}]${0}

snippet dcp dict comprehension
	{${1}: ${2} for ${3} in ${4:${VISUAL}}}${0}

snippet scp set comprehension
	{${1} for ${2} in ${3:${VISUAL}}}${0}

# Printing
snippet pr
	print($0)

snippet prs
	print("$0")

snippet prf
	print(f"$0")

snippet fpr
	print($0, file=${1:sys.stderr})

snippet fprs
	print("$0", file=${1:sys.stderr})

snippet fprf
	print(f"$0", file=${1:sys.stderr})
